#!/usr/bin/python
import sys, os, os.path
import binascii
import lxml
from lxml import etree

def download_images(filename):
    parser = etree.XMLParser(ns_clean=True,recover=True,remove_blank_text=True)
    tree   = etree.parse(filename, parser)    
    for image in tree.xpath("/UI/images/image"):
        imgname = image.attrib["name"]
        for data in image.xpath("data"):
            datalen = int(data.attrib["length"])
            dataformat = str(data.attrib["format"]).lower()
            hexdata = str(data.text)
            try: assert(datalen == len(hexdata))
            except AssertionError: print "WARN: La longitud de la imagen %s especificada en el atributo %d no cumple la real %d" % (imgname,datalen, len(hexdata))
            binary = binascii.unhexlify(hexdata)        
            img_filename = imgname+"."+dataformat
            f1 = open(img_filename,"w")
            f1.write(binary)
            f1.close()
            print "Image file %s written." % (img_filename)
            
def check_images(filename):
    parser = etree.XMLParser(ns_clean=True,recover=True,remove_blank_text=True)
    tree   = etree.parse(filename, parser)    
    image_list = []
    for image in tree.xpath("/UI/images/image"):
        imgname = image.attrib["name"]
        for data in image.xpath("data"):
            datalen = int(data.attrib["length"])
            dataformat = str(data.attrib["format"]).lower()
            hexdata = str(data.text)
            try: assert(datalen == len(hexdata))
            except AssertionError: print "WARN: La longitud de la imagen %s especificada en el atributo %d no cumple la real %d" % (imgname,datalen, len(hexdata))
            image_list.append(imgname)
            
    used_image_list = []
    for iconset in tree.xpath("//widget/property/iconset"):
        imgname = iconset.text.strip()
        used_image_list.append(imgname)
        if imgname not in image_list:
            print "Imagen '%s' no existe. Este es el control:" % imgname
            print etree.tostring(iconset.getparent().getparent(), pretty_print=True)
            print
    unused_images = list(set(image_list) - set(used_image_list) )
    if unused_images:
        print "Algunas imagenes no se usan:", ", ".join(unused_images)

            
            

def upload_images(filename, files):
    parser = etree.XMLParser(ns_clean=True,recover=True,remove_blank_text=True)
    tree   = etree.parse(filename, parser)    
    root = tree.getroot()
    try: tagimages = tree.xpath("/UI/images")[0]
    except IndexError: tagimages = etree.SubElement(root, "images")
    
    for imgfile in files:
        name, format = os.path.splitext(os.path.basename(imgfile))
        bindata = open(imgfile).read()
        hexdata = binascii.hexlify(bindata)        
        lendata = len(hexdata)
        if format.startswith("."): format = format[1:]
        format = format.upper()
        task = "Created"
        for image in tree.xpath("/UI/images/image[@name='%s']" % name):
            tagimages.remove(image)
            task = "Overwritten"
        newimage = etree.SubElement(tagimages, "image", name = name)
        newdata = etree.SubElement(newimage, "data", format = format, length = str(lendata))
        newdata.text = hexdata
        print "%s image %s with format %s datalen %d" % (task, name, format, lendata)
        
    
    open(filename,"w").write(etree.tostring(tree, pretty_print=True))


def fix_datalen(filename):
    tree   = etree.parse(filename)    
    for image in tree.xpath("/UI/images/image"):
        imgname = image.attrib["name"]
        for data in image.xpath("data"):
            datalen = int(data.attrib["length"])
            hexdata = str(data.text)
            try: assert(datalen == len(hexdata))
            except AssertionError: 
                data.attrib['length'] = str(len(hexdata))
                print "La longitud de la imagen %s especificada %d se ha corregido por la real %d" % (imgname,datalen, len(hexdata))
        tree.write(filename, encoding='utf-8')


def readImageName(cstring, fileTheme):
    treeImg = etree.parse(fileTheme)
    rootImg = treeImg.getroot()
    for widgetImg in rootImg.iter('widget'):
        claseImg = widgetImg.get('class')
        cstringImg = widgetImg.find('property/cstring').text
        icono = None
        if cstringImg in cstring:
            if claseImg == "QToolButton":
                icono = widgetImg.find('property/iconset')
            if claseImg == "QPushButton":
                icono = widgetImg.find('property/pixmap')
            if icono != None:
                image_name = icono.text
                return image_name


def readImageData(image_name, fileTheme):
    treeImg = etree.parse(fileTheme)
    rootImg = treeImg.getroot()
    imagesImg = rootImg.find("images")
    for imageImg in imagesImg:
        if imageImg.get('name') == image_name:
            data = imageImg.find('data')
            data_format = data.get('format')
            data_length = data.get('length')
            data_text = data.text
            return data_format, data_length, data_text


def cambioImagenNom(widget, clase, image_name):
    icono = widget.find('property/iconset')
    if icono == None:
        icono = widget.find('property/pixmap')
    if icono != None:
        imageLast = icono.text
        icono.text = str(image_name)
        return imageLast


def cambioImagenData(tree, imageLast, image_name, data_format, data_length, data_text):
    for image in tree.xpath("/UI/images/image[@name='%s']" % imageLast):
        data = image.find('data')
        image.attrib['name'] = image_name
        data.attrib['format'] = data_format
        data.attrib['length'] = data_length
        data.text = data_text


def eliminarImageElem(image, images, imageLast):
    if image.getparent() is not None:
        if image.attrib["name"] == imageLast:
            images.remove(image)


def eliminarMaximumSize(widget):
    widgetProp = widget.find('property')
    for widgetProp in widget.iter('property'):
        nameProp = widgetProp.get('name')
        if nameProp == "maximumSize":
            widget.remove(widgetProp)


def genImageElem(images, image_name, data_format, data_length, data_text):
    imageElem = etree.SubElement(images, "image")
    imageElem.set("name", image_name)
    data = etree.SubElement(imageElem, "data")
    data.set("format", data_format)
    data.set("lenght", data_length)
    data.text = data_text


def acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files):
    image_name = readImageName(cstring, fileTheme)
    data_format = readImageData(image_name, fileTheme)[0]
    data_length = readImageData(image_name, fileTheme)[1]
    data_text = readImageData(image_name, fileTheme)[2]
    imageLast = cambioImagenNom(widget, clase, image_name)
    cambioImagenData(tree, imageLast, image_name, data_format, data_length, data_text)
    #eliminarImageElem(image, images, imageLast)
    #eliminarMaximumSize(widget)
    #genImageElem(images, image_name, data_format, data_length, data_text)
    tree.write(ficheroSalida, encoding='utf-8')
    print "Se ha cambiado la imagen %s por la imagen del theme %s para el boton %s en el fichero %s" % (imageLast, image_name, cstring, files)


def modifFile(ficheroEntrada, ficheroSalida, fileTheme, files):
    parser = etree.XMLParser(ns_clean=True, recover=True, remove_blank_text=False)
    tree = etree.parse(ficheroEntrada,  parser)
    root = tree.getroot()
    images = root.find("images")
    if images is not None:
        image = images.find("image")
        for widget in root.iter('widget'):
            clase = widget.get('class')
            cstring = widget.find('property/cstring').text
            if cstring is not None:
                if "toolButtonInsert" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtomInsert" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtonEdit" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtonDelete" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtonZoom" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtonCopy" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)
                if "toolButtonPrint" in cstring:
                    acciones(tree, widget, clase, cstring, fileTheme, ficheroSalida, files)


def formsToChange(theme, rutaProyecto, metodo):
    rutaProyectoNorm = os.path.normpath(rutaProyecto)
    fileTheme = os.path.normpath(theme)
    if rutaProyectoNorm.endswith(".ui"):
        fileName,  fileExtension = os.path.splitext(rutaProyectoNorm)
        ficheroSalida = fileName + "-modificado" + fileExtension
        files = rutaProyectoNorm
        modifFile(rutaProyecto, ficheroSalida, fileTheme, files)
    for r, d, f in os.walk(rutaProyectoNorm):
        for files in f:
            if files.endswith(".ui"):
                ficheroEntrada = os.path.join(r, files)
                print "Fichero Entrada ", ficheroEntrada
                components = ficheroEntrada.split(os.sep)
                rutaModulo = str.join(os.sep, components[:components.index("forms")])
                if metodo == "overwrite":
                    rutaSalida = rutaModulo + "/forms/"
                    ficheroSalida = rutaModulo + "/forms/" + files
                if metodo == "modify":
                    rutaSalida = rutaModulo + "/forms-modificados/"
                    ficheroSalida = rutaModulo + "/forms-modificados/" + files
                if not os.path.exists(rutaSalida):
                    os.makedirs(rutaSalida)
                modifFile(ficheroEntrada, ficheroSalida, fileTheme, files)

action = sys.argv[1]
if action == "download":
    download_images(sys.argv[2])
elif action == "check":
    check_images(sys.argv[2])
elif action == "upload":
    upload_images(sys.argv[2])
elif action == "fixdatalen":
    fix_datalen(sys.argv[2])
elif action == "changetheme":
    formsToChange(sys.argv[2],sys.argv[3],sys.argv[4])
else:
    print "Unknown action %s " % action